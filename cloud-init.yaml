#cloud-config
write_files:
  - path: /root/conf/enabled_plugins
    content: |
        [prometheus_rabbitmq_exporter,rabbitmq_management].
  - path: /root/conf/rabbitmq.config
    content: |
        [ { rabbit, [
          { loopback_users, [ ] } ] }
         ].
  - path: /etc/sysconfig/docker
    content: |
      # The max number of open files for the daemon itself, and all
      # running containers.  The default value of 1048576 mirrors the value
      # used by the systemd service unit.
      DAEMON_MAXFILES=1048576

      # Additional startup options for the Docker daemon, for example:
      # OPTIONS="--ip-forward=true --iptables=true"
      # By default we limit the number of open files per container
      OPTIONS="--default-ulimit nofile=1000000:1048576"

      # How many seconds the sysvinit script waits for the pidfile to appear
      # when starting the daemon.
      DAEMON_PIDFILE_TIMEOUT=10

  - path: /root/forget_hosts.sh
    content: |
        #!/usr/bin/env bash
        NODE=$1
        docker exec rabbitmq rabbitmqctl forget_cluster_node $1

  - path: /root/find_hosts.sh
    content: |
        #!/usr/bin/env bash

        export AWS_DEFAULT_REGION='${region}'

        DNSES=$(aws ec2 describe-instances --filters "Name=tag:aws:autoscaling:groupName,Values=${asg_name}" "Name=instance-state-name,Values=running" | jq ".Reservations[].Instances[].PrivateDnsName" | xargs)

        for dns in $DNSES; do
          # pulling out just the first part of the name, eg: ip-10-2-1-82.ec2.internal -> ip-10-2-1-82
          dns_subdomain=($${dns//./ })
          if  [ "$dns" != "$HOSTNAME" ] && [  "$dns_subdomain" != "$HOSTNAME" ] ; then
            echo $dns_subdomain
          fi
        done

  - path: /root/bin/join_cluster.sh
    content: |
        #!/usr/bin/env sh

        HOSTNAMES=( $@ )

        for run in {1..3}; do
          sleep $[ ( $RANDOM % 10 )  + 1 ]s
          echo "stopping rabbit to try and join other nodes"
          rabbitmqctl stop_app

          NEW_HOSTNAMES=()
          for peerhostname in $HOSTNAMES; do
            echo "trying to join $${peerhostname}"
            rabbitmqctl join_cluster rabbit@$peerhostname
            st=$?
            if [ $st -ne 0 ] && [ $st -ne 130 ]; then  # 130 is "already joined"
              NEW_HOSTNAMES+=( $peerhostname )
            fi
          done

          HOSTNAMES=( $${NEW_HOSTNAMES[@]} )
          rabbitmqctl start_app
          echo "startting rabbit after trying to join other nodes"

          if [ $${#HOSTNAMES[@]} -eq 0 ]; then
            exit 0
          fi
        done
  - path: /root/configure.sh
    permissions: 0600
    content: |
        #!/usr/bin/env bash
        docker exec rabbitmq rabbitmqctl add_user admin $(aws ssm get-parameter --name ${admin_password} --with-decryption --region ${region} | jq -r '.Parameter.Value')
        docker exec rabbitmq rabbitmqctl set_user_tags admin administrator
        docker exec rabbitmq rabbitmqctl add_user rabbit $(aws ssm get-parameter --name ${rabbit_password} --with-decryption --region ${region} | jq -r '.Parameter.Value')
        docker exec rabbitmq rabbitmqctl add_vhost /
        docker exec rabbitmq rabbitmqctl set_policy -p / ha-three "^" '{"ha-mode":"exactly", "ha-params":${sync_node_count}, "ha-sync-mode":"automatic", "message-ttl":${message_timeout}}'
        docker exec rabbitmq rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"
        docker exec rabbitmq rabbitmqctl set_permissions -p / rabbit ".*" ".*" ".*"
        docker exec rabbitmq rabbitmqctl delete_user guest
  - path: /root/datadog-agent/conf.d/rabbitmq.d/conf.yaml
    permissions: 0600
    content: |
        ad_identifiers:
          - rabbitmq-eng

        init_config:

        instances:
          - rabbitmq_api_url: "http://replace_ip_address_here:15672/api/"
            username: "datadog"
            password: "ENC[DATADOG_PASSWORD]"
  - path: /root/datadog-agent/secrets.sh
    permissions: 0600
    content: |
      #!/usr/bin/env python3
      import sys
      import json
      import boto3

      data = json.load(sys.stdin)

      region = "${region}"

      null = None
      secrets = {}

      def ssm_params(secret):
          ssm_client = boto3.client('ssm', region_name=region)
          parameter = ssm_client.get_parameter(Name='/${app_name}/{}'.format(secret), WithDecryption=True)
          return(parameter['Parameter']['Value'])

      for value in data["secrets"]:
          secrets[value] = {
              "value": ssm_params(value), "error": null
          }

      print(json.dumps(secrets))
  - path: /root/datadog-agent/datadog.yaml
    permissions: 0600
    content: |
        ####### Defaults
        ## Provides autodetected defaults, for vanilla Docker environments,
        ## please see datadog.yaml.example for all supported options

        api_key: "ENC[DATADOG_API_KEY]"
        secret_backend_command: /etc/datadog-agent/secrets.sh

        # Autodiscovery settings for vanilla Docker
        listeners:
          - name: docker
        config_providers:
          - name: docker
            polling: true
            poll_interval: 1s

        # Use java container support
        jmx_use_container_support: true
        #######

        site: datadoghq.com

        tags:
          - application:${app_name}

        env: ${dd_env}

        apm_config:
          enabled: false

        # This setting value is a string
        # See https://github.com/DataDog/datadog-agent/blob/main/pkg/config/config_template.yaml
        process_config:
          enabled: "true"

        health_port: 5555

        logs_enabled: true

        logs_config:
          container_collect_all: true
          logs_enabled: true
          use_http: true
          use_compression: true
          compression_level: 6
          open_files_limit: 200
  - path: /root/configure_datadog_user.sh
    permissions: 0600
    content: |
        #!/usr/bin/env bash
        docker exec rabbitmq rabbitmqctl add_user datadog $(aws ssm get-parameter --name ${dd_password} --with-decryption --region ${region} | jq -r '.Parameter.Value')
        docker exec rabbitmq rabbitmqctl set_user_tags datadog monitoring
        docker exec rabbitmq rabbitmqctl set_permissions -p / datadog "^aliveness-test$" "^amq\.default$" ".*"

runcmd:
  - yum update -y
  - yum install -y docker jq
  - pip3 install boto3
  - DD_AGENT_MAJOR_VERSION=7 DD_INSTALL_ONLY=true DD_API_KEY=$(aws ssm get-parameter --name ${dd_api_key} --with-decryption --region ${region} | jq -r '.Parameter.Value') DD_SITE="${dd_site}" bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script.sh)"
  - systemctl start docker
  - chkconfig docker on
  - usermod -a -G docker dd-agent
  - sed -i "s/replace_ip_address_here/$(curl http://169.254.169.254/latest/meta-data/local-ipv4)/g" /root/datadog-agent/conf.d/rabbitmq.d/conf.yaml
  - cp /root/datadog-agent/datadog.yaml /etc/datadog-agent/datadog.yaml && chown dd-agent /etc/datadog-agent/datadog.yaml
  - cp /root/datadog-agent/conf.d/rabbitmq.d/conf.yaml /etc/datadog-agent/conf.d/rabbitmq.d/conf.yaml && chown dd-agent /etc/datadog-agent/conf.d/rabbitmq.d/conf.yaml
  - cp /root/datadog-agent/secrets.sh /etc/datadog-agent/secrets.sh && chown dd-agent /etc/datadog-agent/secrets.sh && chmod 0700 /etc/datadog-agent/secrets.sh
  - systemctl start datadog-agent
  - $(aws ecr get-login --no-include-email --region ${region} --registry-ids ${ecr_registry_id})
  - docker run -d --name rabbitmq --restart on-failure:5 --hostname $HOSTNAME --log-driver=local --log-opt max-size=10m -p 4369:4369 -p 5672:5672 -p 15672:15672 -p 25672:25672 -e RABBITMQ_ERLANG_COOKIE=$(aws ssm get-parameter --name ${secret_cookie} --with-decryption --region ${region} | jq -r '.Parameter.Value') -v /root/data:/var/lib/rabbitmq -v /root/conf/:/etc/rabbitmq -v /root/bin:/tmp/bin ${rabbitmq_image}
  - sleep 1
  - bash /root/find_hosts.sh
  - docker exec rabbitmq bash /tmp/bin/join_cluster.sh $(bash /root/find_hosts.sh)
  - sleep 1
  - bash /root/configure.sh
  - sleep 1
  - bash /root/configure_datadog_user.sh
